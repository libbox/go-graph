// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"graph/ent/user"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges      UserEdges `json:"edges"`
	post_likes *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Followers holds the value of the followers edge.
	Followers []*User
	// Following holds the value of the following edge.
	Following []*User
	// Requesters holds the value of the requesters edge.
	Requesters []*User
	// Requesting holds the value of the requesting edge.
	Requesting []*User
	// Friend holds the value of the friend edge.
	Friend []*User
	// Likes holds the value of the likes edge.
	Likes []*Post
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// FollowersOrErr returns the Followers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Followers, nil
	}
	return nil, &NotLoadedError{edge: "followers"}
}

// FollowingOrErr returns the Following value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FollowingOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Following, nil
	}
	return nil, &NotLoadedError{edge: "following"}
}

// RequestersOrErr returns the Requesters value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RequestersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Requesters, nil
	}
	return nil, &NotLoadedError{edge: "requesters"}
}

// RequestingOrErr returns the Requesting value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RequestingOrErr() ([]*User, error) {
	if e.loadedTypes[3] {
		return e.Requesting, nil
	}
	return nil, &NotLoadedError{edge: "requesting"}
}

// FriendOrErr returns the Friend value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.Friend, nil
	}
	return nil, &NotLoadedError{edge: "friend"}
}

// LikesOrErr returns the Likes value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikesOrErr() ([]*Post, error) {
	if e.loadedTypes[5] {
		return e.Likes, nil
	}
	return nil, &NotLoadedError{edge: "likes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // age
		&sql.NullString{}, // name
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*User) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // post_likes
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field age", values[0])
	} else if value.Valid {
		u.Age = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[1])
	} else if value.Valid {
		u.Name = value.String
	}
	values = values[2:]
	if len(values) == len(user.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field post_likes", value)
		} else if value.Valid {
			u.post_likes = new(int)
			*u.post_likes = int(value.Int64)
		}
	}
	return nil
}

// QueryFollowers queries the followers edge of the User.
func (u *User) QueryFollowers() *UserQuery {
	return (&UserClient{config: u.config}).QueryFollowers(u)
}

// QueryFollowing queries the following edge of the User.
func (u *User) QueryFollowing() *UserQuery {
	return (&UserClient{config: u.config}).QueryFollowing(u)
}

// QueryRequesters queries the requesters edge of the User.
func (u *User) QueryRequesters() *UserQuery {
	return (&UserClient{config: u.config}).QueryRequesters(u)
}

// QueryRequesting queries the requesting edge of the User.
func (u *User) QueryRequesting() *UserQuery {
	return (&UserClient{config: u.config}).QueryRequesting(u)
}

// QueryFriend queries the friend edge of the User.
func (u *User) QueryFriend() *UserQuery {
	return (&UserClient{config: u.config}).QueryFriend(u)
}

// QueryLikes queries the likes edge of the User.
func (u *User) QueryLikes() *PostQuery {
	return (&UserClient{config: u.config}).QueryLikes(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", u.Age))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
