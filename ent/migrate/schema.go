// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/facebook/ent/schema/field"
)

var (
	// CitiesColumns holds the columns for the "cities" table.
	CitiesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// CitiesTable holds the schema information for the "cities" table.
	CitiesTable = &schema.Table{
		Name:        "cities",
		Columns:     CitiesColumns,
		PrimaryKey:  []*schema.Column{CitiesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:        "comments",
		Columns:     CommentsColumns,
		PrimaryKey:  []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CountriesColumns holds the columns for the "countries" table.
	CountriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// CountriesTable holds the schema information for the "countries" table.
	CountriesTable = &schema.Table{
		Name:        "countries",
		Columns:     CountriesColumns,
		PrimaryKey:  []*schema.Column{CountriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// ForumsColumns holds the columns for the "forums" table.
	ForumsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// ForumsTable holds the schema information for the "forums" table.
	ForumsTable = &schema.Table{
		Name:        "forums",
		Columns:     ForumsColumns,
		PrimaryKey:  []*schema.Column{ForumsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PostsColumns holds the columns for the "posts" table.
	PostsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "content", Type: field.TypeString},
		{Name: "user_likes", Type: field.TypeInt, Nullable: true},
	}
	// PostsTable holds the schema information for the "posts" table.
	PostsTable = &schema.Table{
		Name:       "posts",
		Columns:    PostsColumns,
		PrimaryKey: []*schema.Column{PostsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "posts_users_likes",
				Columns: []*schema.Column{PostsColumns[2]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:        "tags",
		Columns:     TagsColumns,
		PrimaryKey:  []*schema.Column{TagsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "age", Type: field.TypeInt, Nullable: true},
		{Name: "name", Type: field.TypeString, Default: "unknown"},
		{Name: "post_likes", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "users_posts_likes",
				Columns: []*schema.Column{UsersColumns[3]},

				RefColumns: []*schema.Column{PostsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserFollowingColumns holds the columns for the "user_following" table.
	UserFollowingColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "follower_id", Type: field.TypeInt},
	}
	// UserFollowingTable holds the schema information for the "user_following" table.
	UserFollowingTable = &schema.Table{
		Name:       "user_following",
		Columns:    UserFollowingColumns,
		PrimaryKey: []*schema.Column{UserFollowingColumns[0], UserFollowingColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "user_following_user_id",
				Columns: []*schema.Column{UserFollowingColumns[0]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "user_following_follower_id",
				Columns: []*schema.Column{UserFollowingColumns[1]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserRequestingColumns holds the columns for the "user_requesting" table.
	UserRequestingColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "requester_id", Type: field.TypeInt},
	}
	// UserRequestingTable holds the schema information for the "user_requesting" table.
	UserRequestingTable = &schema.Table{
		Name:       "user_requesting",
		Columns:    UserRequestingColumns,
		PrimaryKey: []*schema.Column{UserRequestingColumns[0], UserRequestingColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "user_requesting_user_id",
				Columns: []*schema.Column{UserRequestingColumns[0]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "user_requesting_requester_id",
				Columns: []*schema.Column{UserRequestingColumns[1]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UserFriendColumns holds the columns for the "user_friend" table.
	UserFriendColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeInt},
		{Name: "friend_id", Type: field.TypeInt},
	}
	// UserFriendTable holds the schema information for the "user_friend" table.
	UserFriendTable = &schema.Table{
		Name:       "user_friend",
		Columns:    UserFriendColumns,
		PrimaryKey: []*schema.Column{UserFriendColumns[0], UserFriendColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "user_friend_user_id",
				Columns: []*schema.Column{UserFriendColumns[0]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "user_friend_friend_id",
				Columns: []*schema.Column{UserFriendColumns[1]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CitiesTable,
		CommentsTable,
		CountriesTable,
		ForumsTable,
		PostsTable,
		TagsTable,
		UsersTable,
		UserFollowingTable,
		UserRequestingTable,
		UserFriendTable,
	}
)

func init() {
	PostsTable.ForeignKeys[0].RefTable = UsersTable
	UsersTable.ForeignKeys[0].RefTable = PostsTable
	UserFollowingTable.ForeignKeys[0].RefTable = UsersTable
	UserFollowingTable.ForeignKeys[1].RefTable = UsersTable
	UserRequestingTable.ForeignKeys[0].RefTable = UsersTable
	UserRequestingTable.ForeignKeys[1].RefTable = UsersTable
	UserFriendTable.ForeignKeys[0].RefTable = UsersTable
	UserFriendTable.ForeignKeys[1].RefTable = UsersTable
}
