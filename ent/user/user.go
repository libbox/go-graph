// Code generated by entc, DO NOT EDIT.

package user

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAge holds the string denoting the age field in the database.
	FieldAge = "age"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"

	// EdgeFollowers holds the string denoting the followers edge name in mutations.
	EdgeFollowers = "followers"
	// EdgeFollowing holds the string denoting the following edge name in mutations.
	EdgeFollowing = "following"
	// EdgeRequesters holds the string denoting the requesters edge name in mutations.
	EdgeRequesters = "requesters"
	// EdgeRequesting holds the string denoting the requesting edge name in mutations.
	EdgeRequesting = "requesting"
	// EdgeFriend holds the string denoting the friend edge name in mutations.
	EdgeFriend = "friend"
	// EdgeLikes holds the string denoting the likes edge name in mutations.
	EdgeLikes = "likes"

	// Table holds the table name of the user in the database.
	Table = "users"
	// FollowersTable is the table the holds the followers relation/edge. The primary key declared below.
	FollowersTable = "user_following"
	// FollowingTable is the table the holds the following relation/edge. The primary key declared below.
	FollowingTable = "user_following"
	// RequestersTable is the table the holds the requesters relation/edge. The primary key declared below.
	RequestersTable = "user_requesting"
	// RequestingTable is the table the holds the requesting relation/edge. The primary key declared below.
	RequestingTable = "user_requesting"
	// FriendTable is the table the holds the friend relation/edge. The primary key declared below.
	FriendTable = "user_friend"
	// LikesTable is the table the holds the likes relation/edge.
	LikesTable = "posts"
	// LikesInverseTable is the table name for the Post entity.
	// It exists in this package in order to avoid circular dependency with the "post" package.
	LikesInverseTable = "posts"
	// LikesColumn is the table column denoting the likes relation/edge.
	LikesColumn = "user_likes"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldAge,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the User type.
var ForeignKeys = []string{
	"post_likes",
}

var (
	// FollowersPrimaryKey and FollowersColumn2 are the table columns denoting the
	// primary key for the followers relation (M2M).
	FollowersPrimaryKey = []string{"user_id", "follower_id"}
	// FollowingPrimaryKey and FollowingColumn2 are the table columns denoting the
	// primary key for the following relation (M2M).
	FollowingPrimaryKey = []string{"user_id", "follower_id"}
	// RequestersPrimaryKey and RequestersColumn2 are the table columns denoting the
	// primary key for the requesters relation (M2M).
	RequestersPrimaryKey = []string{"user_id", "requester_id"}
	// RequestingPrimaryKey and RequestingColumn2 are the table columns denoting the
	// primary key for the requesting relation (M2M).
	RequestingPrimaryKey = []string{"user_id", "requester_id"}
	// FriendPrimaryKey and FriendColumn2 are the table columns denoting the
	// primary key for the friend relation (M2M).
	FriendPrimaryKey = []string{"user_id", "friend_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the name field.
	DefaultName string
)
